import java.nio.file.Files

buildscript {
    repositories {
        mavenLocal()
        maven {url 'https://jenkins.cs.ox.ac.uk/artifactory/plugins-snapshot'}
        maven {url 'https://jenkins.cs.ox.ac.uk/artifactory/plugins-release'}
        mavenCentral()
    }
    dependencies {
        classpath "uk.ac.ox.softeng.maurodatamapper.gradle:mdm-gradle-plugin:$mdmGradlePluginVersion"
    }
}

plugins {
    id 'groovy'
    id 'java-library'
    id 'antlr'
}

apply plugin: 'uk.ac.ox.softeng.maurodatamapper.gradle.mdm-gradle'

// Define new "generation" sourceset for generating the dita library
sourceSets {
    // Source is the generation code and the antlr generated source
    generation {
        groovy.srcDirs = ['src/generation/groovy', "${project.buildDir}/generated-src/generation/antlr"]
    }
    // Add the dita generated source into the main src
    main {
        groovy.srcDirs += ["${project.buildDir}/generated-src/main/dita"]
    }
}

// Setup the generation sourceset configurations to extend from the existing configurations
// Note that the antlr plugin adds a new configuration which is loaded into the compileClasspath
configurations {
    generationImplementation.extendsFrom implementation
    generationRuntimeOnly.extendsFrom runtimeOnly
}

test {
    useJUnitPlatform()
}

jar{
    exclude 'logback.*', 'log4j.*'
}

// Make sure we dont stamp addtl files with our license
license {
    excludes([
        '**/dita-ot-*/*',
        '**/*.g4',
        '**/uk/ac/ox/softeng/ebnf/parser/*',
        '**/*.properties'
    ])
}

// Customise the antlr grammer source to output to the "generation/antlr" directory
// Standard format of src dirs is "sourcesetname/codetype"
generateGrammarSource {
    outputDirectory = project.file("${project.buildDir}/generated-src/generation/antlr")
    maxHeapSize = "128m"
    arguments += ['-visitor', '-no-listener']
}

tasks.register('replaceTabsWithSpaces'){
    doLast{
        tasks.generateGrammarSource.outputDirectory.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.java$/){
            it.write(it.text.replaceAll(/\t/,'    '))
        }
    }
}

// Register a new task to generate the dita source into "main/dita" directory
tasks.register('generateDitaSource', JavaExec) {
    ext.destDir = project.file('build/generated-src/main/dita')
    outputs.dir destDir

    classpath = sourceSets.generation.runtimeClasspath
    mainClass = 'uk.ac.ox.softeng.maurodatamapper.dita.generation.DocumentationParser'
    // arguments to pass to the application
    argsString = 'build/generated-src/main/dita'
}

// Ensure tasks are run in the correct order
// antlr grammar -> generation source set compiled -> dita source generated -> main code compiled
tasks.generateGrammarSource.finalizedBy 'replaceTabsWithSpaces'
tasks.compileGenerationJava.dependsOn 'generateGrammarSource','replaceTabsWithSpaces'
tasks.generateDitaSource.dependsOn 'generationClasses'
tasks.compileJava.dependsOn 'generateDitaSource'
tasks.sourcesJar.dependsOn 'generateDitaSource'

checkstyleGeneration{
    // Dont bother scanning the generated antlr code
    exclude '**/ebnf/parser/**'
}

codenarcGeneration {
    compilationClasspath = sourceSets.generation.compileClasspath + sourceSets.generation.output
}

codenarcMain {
    compilationClasspath = sourceSets.main.compileClasspath + sourceSets.main.output
    // Dont bother scanning the generated code, we've cleaned up most of the issues, the ones remaining are impossible to fix due to the source they're generated from
    exclude '**/dita/elements/langref/**'
}

tasks.spotbugsGeneration{
    onlyAnalyze.add('uk.ac.ox.softeng.maurodatamapper.dita.*')
}

tasks.spotbugsMain{
    [
        'uk.ac.ox.softeng.maurodatamapper.dita.attributes.*',
        'uk.ac.ox.softeng.maurodatamapper.dita.enums.*',
        'uk.ac.ox.softeng.maurodatamapper.dita.html.*',
        'uk.ac.ox.softeng.maurodatamapper.dita.meta.*',
        'uk.ac.ox.softeng.maurodatamapper.dita.processor.*',
        'uk.ac.ox.softeng.maurodatamapper.dita.DitaProject',
        'uk.ac.ox.softeng.maurodatamapper.dita.DitaProjectOptions',
        'uk.ac.ox.softeng.maurodatamapper.dita.Test',
    ].each {
        onlyAnalyze.add(it)
    }
}

afterEvaluate {
    // Make sure intellij shows the build folder so we can see the generated code
    // And add the src/main/antlr directory (source dir for antlr plugin) to the source listing so it looks right
    idea.module{
        sourceDirs << project.file('src/main/antlr')
    }
    jar {
        manifest {
            attributes(
                "Class-Path": configurations.runtimeClasspath.collect {it.getName()}.join(' '))
        }
    }

    // Make sure groovy tasks can compile
    tasks.withType(GroovyCompile) {
        configure(groovyOptions.forkOptions) {
            memoryMaximumSize = '1g'
            jvmArgs = ['-Xms512m', '-Xmx1g']
        }
    }
}

apply from: 'dependencies.gradle'